version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: ${CONTAINER_REGISTRY}/${IMAGE_REPOSITORY}-nginx:${IMAGE_TAG}
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

  # Backend API Service
  backend:
    image: ${CONTAINER_REGISTRY}/${IMAGE_REPOSITORY}-backend:${IMAGE_TAG}
    environment:
      - NODE_ENV=production
      - PORT=8080
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_TLS=${REDIS_TLS}
      - REDIS_AUTH_MODE=${REDIS_AUTH_MODE}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # React Frontend Service  
  frontend:
    image: ${CONTAINER_REGISTRY}/${IMAGE_REPOSITORY}-frontend:${IMAGE_TAG}
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  app-network:
    driver: bridge
